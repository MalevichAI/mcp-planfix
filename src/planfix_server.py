#!/usr/bin/env python3
"""
Planfix MCP Server

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Planfix —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º Model Context Protocol (MCP)
–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Claude –∏ –¥—Ä—É–≥–∏–º–∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏.

–ê–≤—Ç–æ—Ä: Your Name
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import argparse
import json
import logging
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from typing import Any, AsyncIterator, Dict, Optional

from mcp.server.fastmcp import Context, FastMCP
from pydantic import BaseModel, Field, ValidationError, field_validator

from .config import config
from .planfix_api import PlanfixAPI, PlanfixError, PlanfixValidationError
from .utils import (
    format_date,
    format_error,
)

# ============================================================================
# INPUT VALIDATION MODELS
# ============================================================================

class TaskSearchRequest(BaseModel):
    """Validation model for task search parameters."""
    query: str = Field(default="", description="Search query for task name")
    project_id: Optional[int] = Field(default=None, ge=1, description="Project ID filter")
    assignee_id: Optional[int] = Field(default=None, ge=1, description="Assignee ID filter")
    status: str = Field(default="active", description="Task status filter")
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")
    
    @field_validator('status')
    @classmethod
    def validate_status(cls, v: str) -> str:
        allowed_statuses = ['active', 'completed', 'all']
        if v not in allowed_statuses:
            raise ValueError(f"Status must be one of: {', '.join(allowed_statuses)}")
        return v


class ContactSearchRequest(BaseModel):
    """Validation model for contact search parameters."""
    query: str = Field(default="", max_length=255, description="Search query for contact name")
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")
    is_company: bool = Field(default=False, description="Filter for companies only")


class ContactDetailsRequest(BaseModel):
    """Validation model for contact details request."""
    contact_id: int = Field(..., ge=1, description="Contact ID")


class ListRequest(BaseModel):
    """Validation model for basic list parameters."""
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")


class FileListRequest(BaseModel):
    """Validation model for file list parameters."""
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")
    task_id: Optional[int] = Field(default=None, ge=1, description="Task ID filter")
    project_id: Optional[int] = Field(default=None, ge=1, description="Project ID filter")


class CommentListRequest(BaseModel):
    """Validation model for comment list parameters."""
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")
    task_id: Optional[int] = Field(default=None, ge=1, description="Task ID filter")
    project_id: Optional[int] = Field(default=None, ge=1, description="Project ID filter")


# ============================================================================
# VALIDATION HELPER FUNCTIONS
# ============================================================================

def validate_input(data: Dict[str, Any], model_class: type) -> BaseModel:
    """Validate input data against a Pydantic model."""
    try:
        return model_class(**data)
    except ValidationError as e:
        error_details: list[str] = []
        for error in e.errors():
            field = " -> ".join(str(x) for x in error['loc'])
            message = error['msg']
            error_details.append(f"–ü–æ–ª–µ '{field}': {message}")
        
        raise PlanfixValidationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join(error_details))


# Configure logging
logging.basicConfig(level=logging.DEBUG if config.debug else logging.INFO)
logger = logging.getLogger(__name__)
api = None

# Lifespan context for server initialization
@asynccontextmanager
async def server_lifespan(server: FastMCP) -> AsyncIterator[Dict[str, Any]]:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ Planfix MCP Server...")
    global api
    api = PlanfixAPI()
    # Test API connection on startup
    try:
        connection_ok = await api.test_connection()
        if not connection_ok:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    # Print available tools
    try:
        tools_response = await server.list_tools()
        tools = tools_response
        if tools and len(tools) > 0:
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MCP ({len(tools)} —à—Ç.):")
            for tool in tools:
                tool_name = getattr(tool, 'name', 'unknown')
                logger.info(f"   - {tool_name}")
        else:
            logger.warning("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    # Provide context to handlers
    context = {
        "api": api,
        "start_time": datetime.now(),
        "version": "1.0.0"
    }
    
    try:
        yield context
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Planfix MCP Server...")

# –°–æ–∑–¥–∞—ë–º MCP —Å–µ—Ä–≤–µ—Ä —Å lifespan —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
mcp = FastMCP(
    name="Planfix Integration",
    lifespan=server_lifespan
)

# ============================================================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (TOOLS) - –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å LLM
# ============================================================================

@mcp.tool()
async def search_tasks(
    query: str = "",
    project_id: Optional[int] = None,
    assignee_id: Optional[int] = None,
    status: str = "active",
    limit: int = 20,
    ctx: Context = None
) -> str:
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –≤ Planfix.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
        project_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
        assignee_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (active, completed, all)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        
    Example:
        search_tasks("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", status="active")
    """
    try:
        # Validate input parameters
        request_data = {
            "query": query,
            "project_id": project_id,
            "assignee_id": assignee_id,
            "status": status,
            "limit": limit
        }
        validated_request = validate_input(request_data, TaskSearchRequest)
        
        ctx.info(f"–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á: query='{validated_request.query}', status='{validated_request.status}'")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # Search tasks via API using validated parameters
        tasks = await api.search_tasks(
            query=validated_request.query,
            project_id=validated_request.project_id,
            assignee_id=validated_request.assignee_id,
            status=validated_request.status,
            limit=validated_request.limit
        )
        
        # Format and return results
        result = json.dumps([task.model_dump() for task in tasks], indent=2, ensure_ascii=False)
        
        if len(tasks) >= validated_request.limit:
            result += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {validated_request.limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            
        ctx.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
        ctx.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return error_msg
    except PlanfixError as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        ctx.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        logger.error(f"Unexpected error searching tasks: {e}")
        return error_msg

# Removed update_task_status - read-only scope

# Removed add_task_comment - read-only scope

# Removed create_project and add_contact - read-only scope


# ============================================================================
# COMPREHENSIVE READ-ONLY TOOLS - Search and List Operations
# ============================================================================

@mcp.tool()
async def search_contacts(
    query: str = "",
    limit: int = 20,
    is_company: bool = False
) -> str:
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Planfix.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        is_company: –ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        
    Example:
        search_contacts("–ò–≤–∞–Ω", 10)
    """
    try:
        # Validate input parameters
        request_data = {
            "query": query,
            "limit": limit,
            "is_company": is_company
        }
        validated_request = validate_input(request_data, ContactSearchRequest)
        
        logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: query='{validated_request.query}', is_company={validated_request.is_company}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        contacts = await api.search_contacts(
            query=validated_request.query, 
            limit=validated_request.limit,
            is_company=validated_request.is_company
        )
        result = json.dumps([contact.model_dump() for contact in contacts], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        logger.error(f"Unexpected error searching contacts: {e}")
        return error_msg

@mcp.tool()
async def get_contact_details(contact_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ.
    
    Args:
        contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
    Returns:
        –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        
    Example:
        get_contact_details(123)
    """
    try:
        # Validate input parameters
        request_data = {"contact_id": contact_id}
        validated_request = validate_input(request_data, ContactDetailsRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞: {validated_request.contact_id}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        contact = await api.get_contact_details(validated_request.contact_id)
        
        # Format single contact as detailed view
        name = contact.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        midname = contact.midname or ""
        lastname = contact.lastname or ""
        full_name = f"{name} {midname} {lastname}".strip()
        
        result = f"–ö–æ–Ω—Ç–∞–∫—Ç #{contact.id}\n\n"
        result += f"–ò–º—è: {full_name}\n"
        
        if contact.email:
            result += f"Email: {contact.email}\n"
        if contact.phone:
            result += f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone}\n"
        if contact.company:
            result += f"–ö–æ–º–ø–∞–Ω–∏—è: {contact.company}\n"
        if contact.position:
            result += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {contact.position}\n"
        if contact.description:
            result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {contact.description[:200]}{'...' if len(contact.description) > 200 else ''}\n"
        if contact.is_company:
            result += f"–¢–∏–ø: –ö–æ–º–ø–∞–Ω–∏—è\n"
        if contact.created_date:
            result += f"–°–æ–∑–¥–∞–Ω: {format_date(contact.created_date)}\n"
        
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        logger.error(f"Unexpected error getting contact: {e}")
        return error_msg

@mcp.tool()
async def list_employees(limit: int = 20) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        
    Example:
        list_employees(10)
    """
    try:
        # Validate input parameters
        request_data = {"limit": limit}
        validated_request = validate_input(request_data, ListRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: limit={validated_request.limit}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        employees = await api.list_employees(limit=validated_request.limit)
        result = json.dumps([employee.model_dump() for employee in employees], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        logger.error(f"Unexpected error listing employees: {e}")
        return error_msg

@mcp.tool()
async def list_files(
    limit: int = 20,
    task_id: Optional[int] = None,
    project_id: Optional[int] = None
) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        
    Example:
        list_files(10, task_id=123)
    """
    try:
        # Validate input parameters
        request_data = {
            "limit": limit,
            "task_id": task_id,
            "project_id": project_id
        }
        validated_request = validate_input(request_data, FileListRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: limit={validated_request.limit}, task_id={validated_request.task_id}, project_id={validated_request.project_id}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        files = await api.list_files(
            limit=validated_request.limit, 
            task_id=validated_request.task_id, 
            project_id=validated_request.project_id
        )
        result = json.dumps([file.model_dump() for file in files], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
        logger.error(f"Unexpected error listing files: {e}")
        return error_msg

@mcp.tool()
async def list_comments(
    limit: int = 20,
    task_id: Optional[int] = None,
    project_id: Optional[int] = None
) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        
    Example:
        list_comments(10, task_id=123)
    """
    try:
        # Validate input parameters
        request_data = {
            "limit": limit,
            "task_id": task_id,
            "project_id": project_id
        }
        validated_request = validate_input(request_data, CommentListRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: limit={validated_request.limit}, task_id={validated_request.task_id}, project_id={validated_request.project_id}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        comments = await api.list_comments(
            limit=validated_request.limit, 
            task_id=validated_request.task_id, 
            project_id=validated_request.project_id
        )
        result = json.dumps([comment.model_dump() for comment in comments], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        logger.error(f"Unexpected error listing comments: {e}")
        return error_msg

@mcp.tool()
async def list_reports(limit: int = 20) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
        
    Example:
        list_reports(10)
    """
    try:
        # Validate input parameters
        request_data = {"limit": limit}
        validated_request = validate_input(request_data, ListRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤: limit={validated_request.limit}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        reports = await api.list_reports(limit=validated_request.limit)
        result = json.dumps([report.model_dump() for report in reports], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {len(reports)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–æ–≤")
        logger.error(f"Unexpected error listing reports: {e}")
        return error_msg

@mcp.tool()
async def list_processes(limit: int = 20) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        
    Example:
        list_processes(10)
    """
    try:
        # Validate input parameters
        request_data = {"limit": limit}
        validated_request = validate_input(request_data, ListRequest)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: limit={validated_request.limit}")
        
        if api is None:
            return "API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        processes = await api.list_processes(limit=validated_request.limit)
        result = json.dumps([process.model_dump() for process in processes], indent=2, ensure_ascii=False)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}")
        return result
        
    except PlanfixValidationError as e:
        error_msg = f"{str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        logger.error(f"Unexpected error listing processes: {e}")
        return error_msg

# ============================================================================
# –†–ï–°–£–†–°–´ (RESOURCES) - –î–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è LLM
# ============================================================================

@mcp.resource("dashboard://summary")
async def get_dashboard_summary() -> str:
    """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É Planfix."""
    try:
        # Get current data
        active_tasks = await api.search_tasks(status="active")
        projects = await api.get_projects()
        
        # Calculate stats
        active_count = len(active_tasks)
        overdue_count = sum(1 for task in active_tasks 
                          if hasattr(task, 'deadline') and task.deadline and task.deadline < datetime.now().strftime("%Y-%m-%d"))
        
        # Get completed tasks today (mock data for now)
        completed_today = 8  # This would be a real API call
        
        result = f"–°–≤–æ–¥–∫–∞ Planfix –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        result += "–ó–ê–î–ê–ß–ò:\n"
        result += f"- –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}\n"
        result += f"- –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã: {overdue_count}\n"
        result += f"- –ó–∞–≤–µ—Ä—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n\n"
        
        result += "–ü–†–û–ï–ö–¢–´:\n"
        result += f"- –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}\n"
        active_projects = [p for p in projects if hasattr(p, 'status') and p.status != "COMPLETED"]
        result += f"- –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_projects)}\n\n"
        
        result += "–ê–ö–¢–ò–í–ù–û–°–¢–¨:\n"
        result += f"- –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: 78%\n"  # Mock data
        result += f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting dashboard: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {format_error(e)}"

@mcp.resource("projects://list")
async def get_projects_list() -> str:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    try:
        projects = await api.get_projects()
        
        if not projects:
            return "–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"–ü—Ä–æ–µ–∫—Ç—ã ({len(projects)} —à—Ç.)\n\n"
        
        for i, project in enumerate(projects, 1):
            result += f"{i}. {project.name} (#{project.id})\n"
            if hasattr(project, 'status') and project.status:
                result += f"- –°—Ç–∞—Ç—É—Å: {project.status}\n"
            if hasattr(project, 'owner') and project.owner:
                result += f"- –í–ª–∞–¥–µ–ª–µ—Ü: {project.owner}\n"
            if hasattr(project, 'task_count') and project.task_count:
                result += f"- –ó–∞–¥–∞—á: {project.task_count}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting projects: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {format_error(e)}"

@mcp.resource("task://{task_id}")
async def get_task_details(task_id: str) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ."""
    try:
        # Validate task_id parameter
        try:
            task_id_int = int(task_id)
            if task_id_int < 1:
                raise ValueError("Task ID must be positive")
        except ValueError:
            return f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: {task_id}"
        
        task = await api.get_task(task_id_int)
        
        result = f"–ó–∞–¥–∞—á–∞ #{task.id}\n\n"
        result += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.name}\n"
        
        if hasattr(task, 'description') and task.description:
            result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description[:200]}{'...' if len(task.description) > 200 else ''}\n"
        
        if hasattr(task, 'status') and task.status:
            result += f"–°—Ç–∞—Ç—É—Å: {task.status}\n"
        
        # Handle both TaskResponse and legacy Task models for assignee
        assignee = None
        if hasattr(task, 'assigner') and task.assigner:
            assignee = getattr(task.assigner, 'name', None)
        elif hasattr(task, 'assignees') and task.assignees and task.assignees.users:
            assignee = task.assignees.users[0].name if task.assignees.users[0].name else "Assigned"
        elif hasattr(task, 'assignee') and task.assignee:
            assignee = task.assignee
        
        if assignee:
            result += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}\n"
        
        if hasattr(task, 'project') and task.project:
            result += f"–ü—Ä–æ–µ–∫—Ç: {task.project}\n"
        
        if hasattr(task, 'priority') and task.priority:
            result += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
        
        if hasattr(task, 'deadline') and task.deadline:
            result += f"–°—Ä–æ–∫: {format_date(task.deadline)}\n"
        
        result += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting task {task_id}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {format_error(e)}"

@mcp.resource("contacts://recent")
async def get_recent_contacts() -> str:
    """–°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    try:
        contacts = await api.get_contacts(limit=10)
        
        if not contacts:
            return "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"–ù–µ–¥–∞–≤–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ({len(contacts)} —à—Ç.)\n\n"
        
        for i, contact in enumerate(contacts, 1):
            result += f"{i}. {contact.name} (#{contact.id})\n"
            
            if contact.email:
                result += f"- Email: {contact.email}\n"
            if contact.phone:
                result += f"- –¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone}\n"
            if contact.company:
                result += f"- –ö–æ–º–ø–∞–Ω–∏—è: {contact.company}\n"
            if contact.position:
                result += f"- –î–æ–ª–∂–Ω–æ—Å—Ç—å: {contact.position}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting contacts: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {format_error(e)}"

# ============================================================================
# –ü–†–û–ú–ü–¢–´ (PROMPTS) - –®–∞–±–ª–æ–Ω—ã –¥–ª—è LLM
# ============================================================================

@mcp.prompt()
def analyze_project_status(project_name: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."""
    return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "{project_name}" –≤ Planfix:

üîç **–ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê:**
1. –ü—Ä–æ–≤–µ—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ä–æ–∫–∞–º
2. –û—Ü–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞  
3. –í—ã—è–≤–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
4. –û–ø—Ä–µ–¥–µ–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
5. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

–ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¶–ï–ù–ö–ò::
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å—Ä–æ–∫
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏

–†–ï–ó–£–õ–¨–¢–ê–¢::
–ü–æ–¥–≥–æ—Ç–æ–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —Å:
‚Ä¢ –¢–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""

@mcp.prompt()
def create_weekly_report(week_start: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    week_end = (datetime.strptime(week_start, "%Y-%m-%d") + timedelta(days=6)).strftime("%Y-%m-%d")
    
    return f"""–°–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {week_start} - {week_end}:

–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ï–î–ï–õ–ò::
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤ —Å—Ä–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

–î–û–°–¢–ò–ñ–ï–ù–ò–Ø::
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã/—ç—Ç–∞–ø—ã
‚Ä¢ –†–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

–ü–†–û–ë–õ–ï–ú–´ –ò –†–ò–°–ö–ò:
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏  
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ—Å—É—Ä—Å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–¢–†–ï–ù–î–´ –ò –ê–ù–ê–õ–ò–ó::
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ

–ü–õ–ê–ù–´ –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ::
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"""

@mcp.prompt()
def plan_sprint(sprint_duration: int = 14) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞."""
    return f"""–°–ø–ª–∞–Ω–∏—Ä—É–π —Å–ø—Ä–∏–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {sprint_duration} –¥–Ω–µ–π:

–¶–ï–õ–ò –°–ü–†–ò–ù–¢–ê::
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø—Ä–∏–Ω—Ç–∞
2. –£—Å—Ç–∞–Ω–æ–≤–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
3. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß::
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–µ–∫–ª–æ–≥ –∑–∞–¥–∞—á
‚Ä¢ –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –£—á—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏

–í–†–ï–ú–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï::
‚Ä¢ –†–∞–∑–±–µ–π —Å–ø—Ä–∏–Ω—Ç –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ milestone'—ã
‚Ä¢ –û—Å—Ç–∞–≤—å –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –£—á—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –æ—Ç–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã

–ü–†–û–¶–ï–°–°–´ –ò –†–ò–¢–£–ê–õ–´::
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–∏–Ω–∫–∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å-—Ä–µ–ø–æ—Ä—Ç–æ–≤

–ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ö–û–ù–¢–†–û–õ–¨::
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ KPI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π –¥–∞—à–±–æ—Ä–¥—ã –∏ –æ—Ç—á—ë—Ç—ã
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å –ø–ª–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

–ò–¢–û–ì–û–í–´–ô –ü–õ–ê–ù::
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å–ø—Ä–∏–Ω—Ç–∞ —Å:
- –°–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏
- –ì—Ä–∞—Ñ–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö milestone'–æ–≤
- –ü–ª–∞–Ω –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
- –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–∞ —Å–ø—Ä–∏–Ω—Ç–∞"""

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ============================================================================

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    parser = argparse.ArgumentParser(
        description="Planfix MCP Server - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Planfix —Å Model Context Protocol",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s --account mycompany --api-key abc123
  %(prog)s --debug
  %(prog)s --help

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  PLANFIX_ACCOUNT     –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Planfix
  PLANFIX_API_KEY     API –∫–ª—é—á Planfix
  DEBUG               –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
        """
    )
    
    parser.add_argument(
        "--account",
        type=str,
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Planfix (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ PLANFIX_ACCOUNT)"
    )
    
    parser.add_argument(
        "--api-key",
        type=str,
        help="API –∫–ª—é—á Planfix (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ PLANFIX_API_KEY)"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="Planfix MCP Server 1.0.1"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.account:
        config.planfix_account = args.account
    if args.api_key:
        config.planfix_api_key = args.api_key
    if args.debug:
        config.debug = True
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Planfix MCP Server...")
        mcp.run(transport="stdio")
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
